/*function Registration() {

   return( <h3><h1>Form Register</h1>
       <Form >
           <Form.Group controlId="name">
               <Form.Label>User Name</Form.Label>
               <Form.Control type="name"
                             name="name" class="field" placeholder="Example: UserName"/>

               <Form.Label>Email Adress</Form.Label>
               <Form.Control id="email"
                             name="email" type="email"  placeholder="Example: example@gmail.com"/>

               <Form.Label>Pasword</Form.Label>
               <Form.Control type="pasword" name="pasword" placeholder="Enter Pasword"/>

               <Form.Label>Confirm Pasword</Form.Label>
               <Form.Control type="pasword" placeholder="Enter Confirm Pasword"/>
           </Form.Group>
           <button variant="primary" type="submit">Submit</button>
       </Form>

       </h3>)
}
export default Registration;


import React from 'react';
import {Form} from 'react-bootstrap';
import LoginBar from '../todo/todologin'

function login() {
    return(
        <h3><h1>Log In</h1><Form>
            <Form.Group controlId="Name">
                <Form.Label>User Name</Form.Label>
                <Form.Control type="Name" placeholder="Enter UserName"/>
            </Form.Group>
        </Form>
            <Form>
                <Form.Group controlId="pasword">
                    <Form.Label>Pasword</Form.Label>
                    <Form.Control type="pasword" placeholder="Enter Pasword"/>
                </Form.Group>
            </Form><h5></h5></h3>
    )
}


export default login;

import React from "react";
import {Form} from "react-bootstrap";




const stylesBottom = {
    width:50,
    marginLeft: 700,
}
const styles = {
    width: 200,
    height:250
};
const styless ={
    marginLeft: 100,
    marginTop: 50,
};
function Books() {


    return (
        <div className="row mb-3">

            <div style={styless} className="col-md-10">
                <div
                    className="row g-0 border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">

                    <div className="col p-4 d-flex flex-column position-static">

                        <strong className="d-inline-block mb-2 text-primary">Автор</strong>
                        <h3 className="mb-0">Название книги</h3>
                        <div className="mb-1 text-muted">Дата</div>
                        <p className="card-text mb-auto">Описание</p>
                        <a href="#" className="write">Читать</a>
                        <button style={stylesBottom} type="button" className="btn btn-primary btn-sm">Like</button>

                    </div>

                    <div className="col-auto d-none d-lg-block">

                        <img
                            src="http://pm1.narvii.com/7160/aefe1434328162cbacc31975958cb850de5fc44er1-1920-1200v2_uhq.jpg" style={styles}
                            ></img>
                    </div>
                </div>
            </div>

        </div>

    )}
export default Books;


import {makeAutoObservable} from "mobx";
import {IUser} from "../models/IUser";
import AuthService from "../services/AuthService";

export default class Store{
    user = true;
    isAuth = false;

    constructor() {
        makeAutoObservable(this);
    }
    setAuth(bool: boolean){
        this.isAuth = bool;
    }

    setUser(user: IUser){
        this.user = user;
    }

    async login(email: string, password: string){
        try{
            const response = await AuthService.login(email, password);
            console.log(response);
            localStorage.setItem('token', response.data.accessToken);
            this.setAuth(true);
            this.setUser(response.data.user);
        } catch (e){
            console.log(e.response?.data?.message);
        }
    }
    async registration(email: string, password: string) {
        try {
            const response = await AuthService.registration(email, password);
            console.log(response);
            localStorage.setItem('token', response.data.accessToken);
            this.setAuth(true);
            this.setUser(response.data.user);
        } catch (e) {
            console.log(e.response?.data?.message);
        }
    }
    async logout(){
        try{
            const response = await AuthService.logout();
            localStorage.removeItem('token');
            this.setAuth(false);
            this.setUser({});
        } catch (e){
            console.log(e.response?.data?.message);
        }
}
}